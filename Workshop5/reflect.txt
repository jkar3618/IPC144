///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #5
Full Name  : Taehwa Hong
Student ID#: 132546227

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////


1. Why do we try to use variables and macros to represent information rather than hardcode “magic” numbers 
(constant literals)? Using the details of this workshop, describe at least three advantages this provides us?

   - There are some advantages of using macros to represent information. They provide easy readability, maintenance, and flexibility.

	Firstly, using macros with meaningful names makes it easy to read and understand the code. 
	This is because macros are defined once in the upper code, which helps simplify the code and make it easy to read.

	Secondly, following the first reason of readability, the code will be easy to maintain. 
	Macros are defined once, which makes it easy to change the variable name in one place where macros are defined.

	Thirdly, macros are reusable variables that can be used numerous times and in multiple places.

	Finally, macros are very flexible. If we change the value of a macro, every instance of the macro variable will be updated accordingly, 
	making it easy to modify values.

	There are four advantages of using macros: understanding code, ease of readability, reusability, and flexibility. Macros help us to code efficiently.

2. The rating values entered by the user required iteration to perform basic validations with each iteration 
concentrated on testing for values to be within a specific range. Why do we not include additional logic that sums 
and performs the average? Instead, the sum and average logic is placed outside of any validation routine. Briefly 
explain two reasons why this is better design and refer to the details of this workshop to justify your answer.

   - I chose not to include additional logic and average in the iteration because doing so would make the code more difficult to read and maintain. 
	It would also require unnecessary iterations, which could complicate the code and increase the risk of errors.

	One of the reasons for this is that I would have to declare variables for morningSum and eveningSum 
	if the logic and average were in the iteration. This would add an unnecessary step to finding the meaning of the variables, 
	and it would be easier to simply sum the variables separately without additional logic and average.

	Furthermore, I avoided making other iterations for additional logic and average logic. If I were to declare additional and average variables, 
	I would have to code iterations for them, which would add another unnecessary step. 
	This would make the code more complicated and harder to read and maintain.

	


