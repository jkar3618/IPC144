1. Given the following C statements:

	float price1 = 17.96f, price3 = 17.98f;
	double price2 = 17.96, price4 = 17.98;
	printf("1. 17.96 = %f (as cents:%d)\n", price1, (int)(price1 * 100));
	printf("2. 17.96 = %lf (as cents:%d)\n", price2, (int)(price2 * 100));
	printf("3. 17.98 = %f (as cents:%d)\n", price3, (int)(price3 * 100));
	printf("4. 17.98 = %lf (as cents:%d)\n", price4, (int)(price4 * 100));

Execute the above sample code on your machine. Briefly explain why price1 and the corresponding converted
cent value does not properly represent the intended value. Why do you think all the other samples work as
expected?

	- Compared to the float type, the double type expresses a larger exponential value.
	  Then, the rage of decimals that can be expressed increases. 
	  Also, sins the size representing the fractional part is also increased.
	  The relative error is reduced.


2. Execute the below code on your machine:

	int money = 7245;
	printf("1. $%.2lf\n", money / 100.0);
	printf("2. $%.2lf\n", money / (double)100);
	printf("3. $%.2lf\n", (double)money / 100);

Explain why these three examples work as intended. Apply terms like cast, promotion, coercion, implicit, and
explicit in your answer.

	- type of variable money is int. We can cast type int to float or double by multiplying or dividing int by float or double.
	type of variable money in the first command is int. it is divided floating-point 100.0. int money(7245) is divided by decimal 100.0. Result is 72.45.

	type of variable money in the second command is int. Also, type of number 100 in the second command is int. type int number 100 is mutiplied by (double). 
	Then number 100 is casted to double. Afterthat, int money is divided with (double)100. Result is 72.45.

	int money is casted to double by multiplying (double). So, type of (double)money is double. It is divided int 100. The result is 72.45.

	They are reasons why outputs of three of them are same.


3. Execute the following code on your machine:

	int result, money = 7245;
	result = money / 100;
	printf("1. $%.2lf\n", money / 100);
	printf("2. $%d\n", money / 100);
	printf("3. $%.2lf\n", result);
	printf("4. $%d\n", result);

a) What is the value of the variable result? Explain why.

	- variable result and money are int both of them. Even they are divided by 100, number 100 is also int type.
	Result of int * int is int.

b) What values are displayed for samples 1, 2, 3, and 4?

	$0.00
	$72
	$0.00
	$72

c) What can you conclude about the printf function that causes samples 1 and 3 not to work as expected?

	- Types of variables result and money in sample #1 and #3 are int type. 
	  However, the format specifiers in sample #1and #3 are %.2lf. It is for float type or double type.
	  So, sample 1 and 3 do not work as expected.
	  To get results as expected, type of variables result and money must be casted to float or double.
	  
	  as like
	printf("1. $%.2lf\n", (double)money / 100);
				or
	printf("1. $%.2lf\n", money / (double)100);
	
	printf("3. $%.2lf\n", (double)result);

	


	  

