///////////////////////////////////////////////////////////////////////////
                              Reflection
                          Workshop - #3 (P2)
Full Name  : Taehwa Hong
Student ID#: 132546227
Email      : thong14@myseneca.ca
Section    : IPC144NAA

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////


1. Determining the customer preference based on the number of servings to the available coffee bag weights
required a more complex logical expression. Copy your submitted code for only this part of the logic, and
explain the following:

A) How many relational expressions did you use and identify each of them.
	
	I used 64 relational expressions. 54 of ==, 6 of >, 4 of <.
	There are 
		(coffeeType1 == 'l'), (coffeeType1 == 'L'), (coffeeType3 == 'm'), (coffeeType3 == 'M'), (coffeeType2 == 'r'), (coffeeType2 == 'R'), (suggestCream1 == 'y'), (suggestCream1 == 'Y')
		(coffeeType1 == 'l',  (coffeeType1 == 'L'), (coffeeType3 == 'm'), (coffeeType3 == 'M'), (coffeeType2 == 'r'), (coffeeType2 == 'R'), (suggestCream2 == 'n'), (suggestCream2 == 'N')
		(coffeeType1 == 'l' , (coffeeType1 == 'L'), (coffeeType3 == 'm'), (coffeeType3 == 'M'), (coffeeType2 == 'r'), (coffeeType2 == 'R'), (suggestCream3 == 'n'), (suggestCream3 == 'N')
	in the product data.

	Also, there are these  
		(coffeeType1 == 'l'), (coffeeType1 == 'L'), ((dailyServing > 0), (dailyServing < 5), (weight1 == 250), (suggestCream1 == 'y'), (suggestCream1 == 'Y')
		(coffeeType2 == 'r'), (coffeeType2 == 'R'), ((dailyServing > 4), (dailyServing < 10), (weight2 == 500), (suggestCream2 == 'n'), (suggestCream2 == 'N')
		(coffeeType3 == 'm'), (coffeeType3 == 'M'), ((dailyServing > 10), (weight3 == 1000), (suggestCream3 == 'n'), (suggestCream3 == 'N')
	in the first customer input preference.

	in the second customer input preference, there are the rest of relational expression which are:
		(coffeeType1 == 'l'), (coffeeType1 == 'L'), (dailyServing > 0), (dailyServing < 5), (weight1 == 250), (suggestCream1 == 'y'), (suggestCream1 == 'Y')
		(coffeeType2 == 'r'), (coffeeType2 == 'R'), (dailyServing > 4), (dailyServing < 10), (weight2 == 500), (suggestCream2 == 'n'), (suggestCream2 == 'N')
		(coffeeType3 == 'm'), (coffeeType3 == 'M'), (dailyServing > 10), (weight3 == 1000)), (suggestCream3 == 'n'), (suggestCream3 == 'N'));
	
B) How many logical expressions did you use and identify each of them.
	
	I used 34 logical expressions. 11 of ||, 23 of &&.
	There are 
		(coffeeType1 == 'l') || (coffeeType1 == 'L'), ((dailyServing > 0 && dailyServing < 5) || weight1 == 250), (suggestCream1 == 'y') || (suggestCream1 == 'Y'));
		(coffeeType2 == 'r') && (coffeeType2 == 'R'), ((dailyServing > 4 && dailyServing < 10) && weight2 == 500), (suggestCream2 == 'n') && (suggestCream2 == 'N'));
		(coffeeType3 == 'm') && (coffeeType3 == 'M'), ((dailyServing > 10) && weight3 == 1000), (suggestCream3 == 'n') && (suggestCream3 == 'N'));
	in product data.

	in the first customer input prference,
		(coffeeType3 == 'm') && (coffeeType3 == 'M'), ((dailyServing > 10) && weight3 == 1000), (suggestCream3 == 'n') && (suggestCream3 == 'N'));
		(coffeeType1 == 'l') && (coffeeType1 == 'L'), ((dailyServing > 0 && dailyServing < 5) && weight1 == 250), (suggestCream1 == 'y') && (suggestCream1 == 'Y'));
		(coffeeType2 == 'r') && (coffeeType2 == 'R'), ((dailyServing > 4 && dailyServing < 10) && weight2 == 500), (suggestCream2 == 'n') || (suggestCream2 == 'N'));
		(coffeeType3 == 'm') || (coffeeType3 == 'M'), ((dailyServing > 10) || (weight3 == 1000)), (suggestCream3 == 'n') || (suggestCream3 == 'N')); 

	moreover, in the second customer input preference,
		(coffeeType1 == 'l') && (coffeeType1 == 'L'), ((dailyServing > 0 && dailyServing < 5) && weight1 == 250), (suggestCream1 == 'y') && (suggestCream1 == 'Y'));		
		(coffeeType2 == 'r') && (coffeeType2 == 'R'), ((dailyServing > 4 && dailyServing < 10) && weight2 == 500), (suggestCream2 == 'n') || (suggestCream2 == 'N'));
		(coffeeType3 == 'm') || (coffeeType3 == 'M'), ((dailyServing > 10) || (weight3 == 1000)), (suggestCream3 == 'n') || (suggestCream3 == 'N'));

2. Referring to Part-1 output #9, show how that logic can be coded in TWO correct ways, one applying
DeMorgan’s Law and the other way not using DeMorgan’s Law. Also, identify what method you used in your
submitted answer for Part-1.

	I used code for Part-1 output #9
		printf("9. Based on product ID, product 3 is unique -> %d\n\n", (pd3ID == pd2ID) && (pd3ID == pd1ID));

	However, there are other ways to get same output as I used. They are the ways.

		printf("9. Based on product ID, product 3 is unique -> %d\n\n", !((pd3ID == pd2ID) || (pd3ID == pd1ID)));
										||
		printf("9. Based on product ID, product 3 is unique -> %d\n\n", !(pd3ID || pd2ID) || !(pd3ID || pd1ID));


3. Using the variables you used in Part-2, demonstrate two ways you can organize them, so it is optimized for easy
to maintain code and contributes towards clarity in how data is stored in the program.

	I organized the variables to 'Product Data' and 'Customer Preference'.
	Product Data variables are:

		char coffeeType1, coffeeType2, coffeeType3;
		int weight1, weight2, weight3;
		char suggestCream1, suggestCream2, suggestCream3;

	Moreover, Customer Preference variables are:

		char strength, likeCream;
		int dailyServing;



